---
title: "Tool References"
---

## Cheatsheets

- [Markdown](https://github.com/adam-p/markdown-here/wiki/Markdown-Cheatsheet)
- [pandas](https://pandas.pydata.org/Pandas_Cheat_Sheet.pdf)
- [Plotly Express](https://franzdiebold.github.io/plotly-express-cheat-sheet/Plotly_Express_cheat_sheet.pdf) or [this one](https://www.kaggle.com/code/themlphdstudent/cheat-sheet-plotly-charts)
- Novartis Graphics Principles [Cheatsheet](https://github.com/GraphicsPrinciples/CheatSheet/blob/master/NVSCheatSheet.pdf)

## Tutorials

- Quarto tutorial: [hello](https://quarto.org/docs/get-started/hello/rstudio.html), [computations](https://quarto.org/docs/get-started/computations/rstudio.html), [authoring](https://quarto.org/docs/get-started/authoring/rstudio.html)
  - [Markdown](https://www.markdowntutorial.com/)
  - See also our [in-class tutorial](../units/01intro/quarto.qmd)
- [Pandas Tutor](https://pandastutor.com/index.html)

### Python tutorials

- The ["official" Python tutorial](https://docs.python.org/3/tutorial/index.html)
- [Codecademy’s “Learn Python” Tutorial](https://www.codecademy.com/learn/learn-python)
- [futurecoder python tutorial](https://futurecoder.io/): nicely done, but only covers the basics
- [educative python tutorial](https://www.educative.io/courses/learn-python-3-from-scratch): not quite as slick as futurecoder, but it covers some important things that are missing there.
- [W3Schools Python Tutorial](https://www.w3schools.com/python/default.asp) and [Quiz](https://www.w3schools.com/python/python_quiz.asp)
- Kaggle [tutorials](https://www.kaggle.com/learn):
    -   [learn python](https://www.kaggle.com/learn/python)
    -   [learn pandas](https://www.kaggle.com/learn/pandas)

## Reference Materials

- [Plotly](https://plotly.com/python/plotly-express/) (ignore everything in the Plotly docs about "Dash")
- [Python Data Science Handbook](https://jakevdp.github.io/PythonDataScienceHandbook//)
- [Python documentation](https://docs.python.org/3/index.html). Especially useful:
  - [built-in functions](https://docs.python.org/3/library/functions.html)
  - [data types](https://docs.python.org/3/library/stdtypes.html)
  - [other built-in functionality ("standard library")](https://docs.python.org/3/library/index.html)
  - [Regular Expression How-To](https://docs.python.org/3/howto/regex.html)
  - the [language reference](https://docs.python.org/3/reference/index.html) has way more than you ever wanted to know about Python

## Scikit-Learn

**Name**: scikit-learn, abbreviated *sklearn* (but not "scikit"); "sci" for "science", "kit" for "toolkit"

### References

- [Getting Started](https://scikit-learn.org/stable/getting_started.html)
- [User guide](https://scikit-learn.org/stable/user_guide.html)
- [Glossary](https://scikit-learn.org/stable/glossary.html)

### Examples of using sklearn

- [Examples from scikit-learn 1.3.2 documentation](https://scikit-learn.org/stable/auto_examples/index.html)

### How Trees Work

- [Decision Trees](https://scikit-learn.org/stable/modules/tree.html)
- [Understanding Tree Structure](https://scikit-learn.org/stable/auto_examples/tree/plot_unveil_tree_structure.html#sphx-glr-auto-examples-tree-plot-unveil-tree-structure-py)

### Preprocessing

Unfortunately, even though decision trees do support categorical data in theory, the sklearn implementation does not. You have to one-hot-encode categorical data.

This [sklearn example page](https://scikit-learn.org/stable/auto_examples/ensemble/plot_gradient_boosting_categorical.html#sphx-glr-auto-examples-ensemble-plot-gradient-boosting-categorical-py) shows several ways of doing this.
