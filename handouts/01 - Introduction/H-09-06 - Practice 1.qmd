---
format:
  ipynb:
    toc: false
    number-sections: true
    number-depth: 1
title: 09-06 - Practice 1
---

- Student name, e-mail
- Student name, e-mail

# Retrieval

:::::: {.cell .markdown}

{{< include /_content/questions/ds_applications_t3.md >}}

::::::

:::::: {.cell .markdown}

{{< include /_content/questions/ds_applications_t2.md >}}

::::::

# Exploring Fires in the Amazon Forest

We got this dataset about [fires in the Amazon forest](https://www.kaggle.com/datasets/gustavomodelli/forest-fires-in-brazil) at Kaggle. It reports the number of forest fires in Brazil divided by states. The series comprises the period of approximately 10 years (1998 to 2017). Data were obtained from the official website of the Brazilian government.

> Forest fires are a serious problem for the preservation of the tropical forests. Understanding the frequency of forest fires in a time series can help to take action to prevent them.

The data is in a CSV (comma separated values) file. The following code block, already included, uses the `read_csv` function in pandas to load the data into a data frame called `forest_fires`.

```{python}
import pandas as pd
forest_fires = pd.read_csv('../../data/amazon.csv',encoding='latin-1',parse_dates=True)
```

::: {.callout-note}
The `parse_dates` argument tells pandas to convert the `date` column to a date object, rather than leaving it as a string. (CSV files don't usually specify the data *type* of each column, so we need to tell pandas to interpret those as dates and not as strings like "2011-01-01".)
:::

We can check some of the columns and rows with the methods `.head()`, `.info()`, and `.shape()` (you can search for these methods to have a better idea of what they do).

```{python}
forest_fires.head()
```

```{python}
forest_fires.info()
```

**üìù Exercise**: How many rows does the dataset contain? What does each row represent?

---

---

Let's wrangle a little bit. This code will translate month names from Portuguese to a number (will make easier later):

```{python}
# replace the Brazilian months with English months
forest_fires['month'] = forest_fires['month'].replace({'Janeiro': 1,'Fevereiro':2,'Mar√ßo':3,
                                  'Abril':4,'Maio':5,'Junho':6,'Julho':7,
                                  'Agosto': 8,'Setembro':9,'Outubro':10,
                                  'Novembro':11,'Dezembro':12})
```

Did you notice that our `date` column does not reflect exactly our months? We need to tweak this a little bit. (No time to explain this code now...)

```{python}
# Convert the 'date' column to datetime format
forest_fires['date'] = pd.to_datetime(forest_fires['date'])
# Replace the month in the 'date' column with the month from the 'month' column
forest_fires['date'] = forest_fires.apply(lambda row: row['date'].replace(month=row['month']), axis=1)
forest_fires.head()
```

---

Now we can create a scatter plot showing the forest fires for each date. Sample code is provided below, but you will need to fill in the blanks.

**üìù Exercise**: Give the code for this plot.

```{python}
import plotly.express as px
px.scatter(
    forest_fires,
    x="date", y="number",
    trendline="lowess",
    labels={"date": "Date", "number": "Number of Fires"},
    )
```

Let's deconstruct this code: 
- `px.scatter` is the Plotly Express (`px`) function we'll use to easily construct a scatter plot. We always specify the data frame as the first argument.
- The next arguments define the mappings between the variables in the dataset and the aesthetics of the plot (e.g. x and y coordinates, colors, etc.). 
- The `trendline` argument tells Plotly Express to add a smoothing trend line to the plot. (Try removing this argument to see what happens.) Lowess is a smooth curve; you can try switching it to `ols` to see a linear trend line.
- Finally, the `labels` argument lets us make the visualization more hospitable by specifing the labels for the x and y axes. We pass a dictionary with the column names as keys and the labels as values.

Does it look nice? Nah...

**üìù Exercise**: Add a new code chunk that creates the same plot again, but add a mapping of `workingday` to the `color` aesthetic. Your result should look like:

```{python}
#| echo: false
px.scatter(
    forest_fires,
    x="date", y="number",
    color="state",
    trendline="lowess",
    labels={"date": "Date", "number": "Number of Fires"},
    )
```

---

Aren't there too many states? (Brazil has 27 states). How can we plot at least the states of the North region?

```{python}
north_region_states = [
    'Acre',
    'Amapa',
    'Amazonas',
    'Par√°',
    'Rondonia',
    'Roraima',
    'Tocantins'
]
less_states = forest_fires[forest_fires['state'].isin(north_region_states)]
```

**üìù Exercise**: Now, plot it again.

```{python}
#| echo: false
#| eval: false
px.scatter(
    less_states,
    x="date", y="number",
    color="state",
    trendline="lowess",
    labels={"date": "Date", "number": "Number of Fires"},
    )
```

---

It is still too hard to see anything, right? That's because there are too many data points. We could get the mean forest fires for each year. To do that:

```{python}
mean_numbers_per_year = less_states.groupby(['year','state'])['number'].mean().reset_index()
```

**üìù Exercise**: Now, let's plot the mean number of fires per year. Should we use "scatter" ou "line"?

```{python}
#| echo: false
#| eval: false
px.scatter(
    mean_numbers_per_year,
    x="year", y="number",
    color="state",
    trendline="ols",
    labels={"year": "Year", "number": "Number of Fires"},
    )
```

**üìù Exercise**: write a one or two sentence interpretation of the graph, focusing on the following question: *How do the number of fires compare according to state and year?

## Reflection

Congratulations! We are already doing data science.

**üìù Exercise**: Do you notice how doing this can be better than using an Excel spreadsheet? What did you notice.

---

**üìù Reflection Exercise**: Write a sentence or two of your overall reflections on this practice. You may write whatever you want, but you might perhaps respond to one or two of these questions:

- Was anything unclear about this assignment?
- How hard was it for you? Where did you get "stuck"?
- How long did it take you?
- What questions or uncertainties remain?
- What skills do you think you'll need more practice with?
- Did you try anything out of curiosity that you weren't specifically asked to do?

---

## Submitting

First, make sure that your `.ipynb` file is free of template text. (*Did you change the title and author names? Did you remove the "your code here" lines? Did you delete any "replace this line" text?*)

Then, submit your `.ipynb` file file to Moodle. You can export it from Google Colab.