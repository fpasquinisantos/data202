---
title: "LGN to PDF"
---

```{python}
# Javascript to replace SVG images with PNGs
replace_images_js = '''
// Get all SVG images on the page
const svgImages = document.querySelectorAll('img[src$=".svg"]');

// Loop through each SVG image
svgImages.forEach((svgImage) => {
    // Create a new Image object
    const img = new Image();

    // Set the source of the Image object to the SVG image's source
    img.src = svgImage.src;

    // When the Image object has loaded
    img.onload = () => {
        // Create a new canvas element
        const canvas = document.createElement('canvas');

        // Set the canvas element's dimensions to the Image object's dimensions
        canvas.width = img.width;
        canvas.height = img.height;

        // Get the canvas element's 2D context
        const ctx = canvas.getContext('2d');

        // Draw the Image object onto the canvas element
        ctx.drawImage(img, 0, 0);

        // Replace the original img source with a data URL
        svgImage.src = canvas.toDataURL();
    };
});
'''
```

```{python}
expand_details_js = '''
// Get all details elements on the page
const detailsElements = document.querySelectorAll('details:not([open])');

for (e of detailsElements) {
    e.setAttribute("open", "");
    e.dataset.wasclosed = "";

    e.style.backgroundColor = "#ccc";

    // Get all summary elements in the details element
    e.querySelectorAll("summary").forEach(s => {
        s.textContent = "(The following content was hidden and has been expanded for printing.)";
        s.style.display = "block";
    });
}
'''
```

```{python}
from playwright.async_api import async_playwright
```


```{python}
p = await async_playwright().start()
browser = await p.chromium.launch(headless=False)
page = await browser.new_page()
```
```{python}
seed_page = "https://learningds.org/preface.html"
await page.goto(seed_page)
while True:
    await page.wait_for_load_state("networkidle")
    title = await page.title()
    print(title)
    # run the js to replace SVGs with PNGs and expand details elements
    await page.evaluate(replace_images_js)
    await page.evaluate(expand_details_js)
    # without a delay, sometimes the details elements don't actually show
    await page.wait_for_timeout(500)
    await page.pdf(path=f'../../learningds/{title}.pdf', format="Letter")

    # Find the "next" button (id="next-link") and get its href
    next_link = await page.query_selector("#next-link")
    if not next_link:
        break
    next_link_href = await next_link.get_attribute("href")

    # If the href starts with a .., then we're at the end of the chapter
    #if next_link_href.startswith(".."):
    #    break

    # otherwise, click the link to go to the next page
    await next_link.click()

```

```{python}
# done!
await browser.close()
await p.stop()
```